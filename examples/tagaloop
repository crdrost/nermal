#!/usr/bin/env node
/* tagaloop 2.0.1 | (c) 2017 Chris Drost
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This script starts an interactive loop for managing a file of tagged strings,
 * which could for example be a password file. The tags are allowed to be 
 * duplicated, and one of the commands (list) lets you use JS regular
 * expressions to filter through those tags. It's a lot like having a plain 
 * text file which you could grep, except it lives in memory and is serialized
 * to the disk with nermal.
 *
 * This script exhibits a common usage case of *key persistence*; you don't have
 * to pay the scrypt() penalty when you are saving the file because the key has
 * already been set up at that time.
 */

/*jslint node: true, stupid: true, evil: true */
/*global require, Buffer */

// keys: (i: {}) -> [string]
function keys(i) {
    "use strict";
    var k, o = [];
    for (k in i) {
        if (i.hasOwnProperty(k)) {
            o.push(k);
        }
    }
    return o.sort();
}

/* interactive: A light way to define interactive console sessions as 
 * read-eval-print loops based on a library of commands:
 *
 *     type $command $a = {
 *         args: string,
 *         help: string,
 *         run: (this: readline.Interface, args...: $a) -> undefined!
 *         vals: (() -> [string])? -- used for tab-complete; default is \_ -> []
 *         sync: boolean?          -- default is true
 *     }
 *
 * In a command specification, command#run() does the actual IO work; 
 * command#sync = false tells the system to not continue the loop when run() 
 * exits; but instead run() will defer the calling of `this.prompt()` until it
 * deems it appropriate.
 *
 * The type variable $a is used to get agreement with the parser:
 * 
 *     type $parser $a = (arg_str: string, cmd_str: string, cmd: $command $a) -> $a
 *
 * Given these, the function has signature:
 *
 *     interactive: (
 *         welcome: string, 
 *         prompt: string, 
 *         lib: dict $command $a, 
 *         parse_args: ($parser $a)?
 *     ) -> undefined!
 */
function interactive(welcome, prompt, lib, parse_args) {
    "use strict";
    // line completer
    function completer(line) {
        var n = line.indexOf(" "), cmd = line.slice(0, n), tail = line.slice(n + 1);
        try { // might not be a .vals() function, or other errors.
            if (n === -1) {
                return lib.hasOwnProperty(line) ?
                        [lib[line].vals().map(function (x) { return " " + x; }), ""] :
                        [keys(lib).filter(function (x) { return x.indexOf(line) === 0; }), line];
            }
            return [lib[cmd].vals().filter(function (x) { return x.indexOf(tail) === 0; }), tail];
        } catch (e) {
            return [[], line];
        }
    }
    parse_args = parse_args || function id(x) {
        return x;
    };
    var count_err = 0, rl = require('readline').createInterface({
        input: process.stdin,
        output: process.stdout,
        completer: completer
    });
    // basic commands common to all interactive() sessions:
    lib["-"] = lib["-"] || {
        args: "<js>",
        help: "Run some js code.",
        run: function (js) {
            try {
                console.log(eval(js));
            } catch (e) {
                console.error(e.toString());
            }
        }
    };
    lib["#"] = lib["#"] || {
        args: "<comment>",
        help: "Ignores the rest of the line. The # must be followed by a space.",
        run: function () { return; }
    };
    lib.help = lib.help || {
        args: "<command>?",
        help: "Prints help text for <command>, or a list of all commands.",
        run: function (cmd) {
            if (cmd === "") {
                console.log("Registered commands: \n    " + keys(lib).join(" "));
                console.log("Type `help [command]` for more info about a particular command.");
            } else {
                console.log(cmd + " " + lib[cmd].args + "\n    " + lib[cmd].help.replace(/\n/g, "\n    "));
            }
        },
        vals: function () {
            return keys(lib);
        }
    };
    rl.setPrompt(prompt, prompt.length);
    rl.on('line', function (line) {
        count_err = 0;
        rl.pause();
        var n = line.indexOf(" "),
            c = n === -1 ? line : line.slice(0, n),
            a = n === -1 ? "" : line.slice(n + 1);
        if (lib.hasOwnProperty(c)) {
            // The first
            lib[c].run.call(rl, parse_args(a, c, lib[c]));
            if (lib[c].sync !== false) {
                setTimeout(rl.prompt.bind(rl), 1);
            }
        } else {
            if (/^\s*$/.test(c) !== true) {
                console.log("Command `" + c + "` not recognized; type `help` for the list of commands.");
            }
            setTimeout(rl.prompt.bind(rl), 1);
        }
    });
    rl.on('SIGINT', function () {
        if (count_err > 0) {
            console.log();
            rl.close();
        } else {
            count_err += 1;
            console.log("\n^C again to exit.");
            rl.prompt();
        }
    });
    console.log(welcome);
    console.log("Type `help` for a list of commands.");
    rl.prompt();
}

var name = 'tagaloop 2.0.1',
    readline = require('readline'),
    crypto = require('crypto'),
    promptly = require('promptly'),
    fs = require('fs'),
    argv = process.argv[0] === "node" ? process.argv.slice(1) : process.argv,
    altered = false,
    nermal,
    commands,
    filename,
    key,
    data,
    commands;

try {
    nermal = require('nermal');
} catch (e) {
    nermal = require('../nermal.js');
}

if (argv.length !== 2) {
    console.error("Usage: " + argv[0] + " <file>");
    console.error("Manage tagged strings in an encrypted `file` through an interactive loop.");
    process.exit(1);
}
filename = argv[1];

/* generate a new ID string which is not used in `data`. These are currently random. */
function newID() {
    "use strict";
    function rewriteB64(b64s) {
        return b64s.replace(/\+/g, "-").replace(/\//g, ".");
    }
    var out;
    function id() {
        return rewriteB64(crypto.pseudoRandomBytes(6).toString('base64'));
    }
    do {
        out = id();
    } while (data.hasOwnProperty(out));
    return out;
}


// synchronously check if the ID is in the database, reporting errors if it isn't.
function checkID(id, fn, err) {
    "use strict";
    if (!data.hasOwnProperty(id)) {
        console.error("ID not in database: " + id);
        if (err) {
            err();
        }
    } else {
        fn();
    }
}

function ids() {
    "use strict";
    return keys(data);
}
function getPass(msg, cb) {
    "use strict";
    promptly.prompt(msg, {silent: true}, function (err, pass) {
        if (err) {
            console.error("Error reading password.");
            return process.exit(2);
        }
        cb(pass);
    });
}

commands = {
    add: {
        args: "<label>",
        help: "Add a new string (can be anything) with the given label.",
        run: function (label) {
            "use strict";
            var self = this;
            this.question("String: ", function (str) {
                var id = newID();
                data[id] = [Date.now(), label, str];
                console.log("Added with id: " + id);
                altered = true;
                self.prompt();
            });
        },
        sync: false
    },
    relabel: {
        args: "<id> <new_label>",
        help: "Change the label tracked by the given ID.",
        run: function (args) {
            "use strict";
            var n = args.indexOf(" "), id = args.slice(0, n);
            if (n === -1) {
                console.error("Usage: relabel <id> <new_label>.");
            } else {
                checkID(id, function () {
                    data[id][0] = Date.now();
                    data[id][1] = args.slice(n + 1);
                    altered = true;
                });
            }
        },
        vals: ids
    },
    alter: {
        args: "<id>",
        help: "Change the string tracked by the given ID.",
        run: function (id) {
            "use strict";
            var self = this;
            checkID(id, function () {
                console.log("Old string: " + data[id][2]);
                self.question("New string: ", function (answer) {
                    data[id][0] = Date.now();
                    data[id][2] = answer;
                    altered = true;
                    self.prompt();
                });
            });
        },
        vals: ids,
        sync: false
    },
    remove: {
        args: "<id>",
        help: "Remove the (label, string) with the given ID.",
        run: function (id) {
            "use strict";
            checkID(id, function () {
                delete data[id];
                altered = true;
            });
        },
        vals: ids
    },
    show: {
        args: "<id>",
        help: "Shows the string indexed by the given id.",
        run: function (id) {
            "use strict";
            checkID(id, function () {
                console.log(id + " | " + data[id].slice(1).join(" | "));
            });
        },
        vals: ids
    },
    list: {
        args: "<regex>?",
        help: "Lists ids whose labels match the regular expression, or all of them." +
            "\n    The regexp is compiled with JavaScript as new RegExp(regex, 'i').",
        run: function (s) {
            "use strict";
            var r = new RegExp(s, "i");
            keys(data).sort(function (x, y) { return data[x][0] - data[y][0]; }).forEach(function (id) {
                if (r.exec(data[id][1])) {
                    console.log(id + " | " + data[id].slice(1).join(" | "));
                }
            });
        }
    },
    exit: {
        args: "",
        help: "Exit this prompt without saving.",
        run: function () {
            "use strict";
            var self = this;
            if (altered) {
                self.question("Potentially unsaved changes.\nAre you sure you want to exit? ", function (answer) {
                    if (/^y/i.exec(answer)) {
                        self.close();
                    } else {
                        self.prompt();
                    }
                });
            } else {
                self.close();
            }
        },
        sync: false
    },
    save: {
        args: "exit?",
        help: "Save the file; optionally exit afterwards.",
        sync: false,
        run: function (exit) {
            "use strict";
            if (exit !== "exit" && exit !== "") {
                console.error("syntax: save [exit]");
                return this.prompt();
            }
            try {
                if (fs.existsSync(filename + "~")) {
                    fs.unlinkSync(filename + "~");
                }
                if (fs.existsSync(filename)) {
                    fs.renameSync(filename, filename + "~");
                }
                fs.writeFileSync(
                    filename,
                    nermal.encrypt(name, JSON.stringify(data), key),
                    {encoding: 'utf8', mode: 384}
                );
                console.log("Written successfully to `" + filename + "`.");
                altered = false;
            } catch (err) {
                console.error("Error writing file: " + err);
                try {
                    if (fs.existsSync(filename + "~") && !fs.existsSync(filename)) {
                        console.error("Attempting to restore earlier state...");
                        fs.renameSync(filename + "~", filename);
                        console.error("Success!");
                    } else if (fs.existsSync(filename)) {
                        console.error("File was created; abandoning efforts to clean up.");
                        console.error("The old file is at `" + filename + "~` and a new one is at `" + filename + "`.");
                    }
                } catch (err2) {
                    console.error("Error while cleaning up: " + err2);
                }
            }
            if (exit === "exit") {
                commands.exit.run.apply(this);
            } else {
                this.prompt();
            }
        },
        vals: function () {
            "use strict";
            return ["exit"];
        }
    }
};


fs.exists(filename, function (file_exists) {
    "use strict";
    var run = interactive.bind({}, "\n" + name, "> ", commands);
    if (!file_exists) {
        promptly.confirm("File '" + filename + "' doesn't exist. Create a new one? ", function (err, y) {
            if (err || !y) {
                return process.exit(1);
            }
            getPass("Select a new password: ", function (pass) {
                getPass("Confirm it: ", function (pass2) {
                    if (pass !== pass2) {
                        console.error("Passwords don't match.");
                        return process.exit(2);
                    }
                    key = nermal.newKey(pass);
                    data = {};
                    console.log("This file will be saved when you use the `save` command.");
                    altered = true;
                    run();
                });
            });
        });
    } else {
        getPass("Password: ", function (pass) {
            var file_contents;
            try {
                file_contents = fs.readFileSync(filename, {encoding: 'utf8'});
                if (file_contents.slice(0, 11) !== "tagaloop 2.") {
                    console.error("This file is not a tagaloop 2.x file.");
                    // process.exit(1);
                }
                key = nermal.getKey(file_contents, pass);
                data = JSON.parse(nermal.decrypt(file_contents, key));
                run();
            } catch (e) {
                console.error("Error reading file: " + e);
                process.exit(1);
            }
        });
    }
});

